load("@rules_cc//cc:cc_binary.bzl", "cc_binary")
load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_nasm//nasm:defs.bzl", "nasm_library")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

_GENERATED_FILES = [
    "config.h",
    "config_components.h",
    "libavcodec/bsf_list.c",
    "libavcodec/codec_list.c",
    "libavcodec/parser_list.c",
    "libavdevice/indev_list.c",
    "libavdevice/outdev_list.c",
    "libavfilter/filter_list.c",
    "libavformat/demuxer_list.c",
    "libavformat/muxer_list.c",
    "libavformat/protocol_list.c",
    "libavutil/avconfig.h",
    "libavutil/ffversion.h",
]

_DOT_VERSIONS = [
    "libavutil/libavutil.version",
    "libswresample/libswresample.version",
    "libswscale/libswscale.version",
    ".version",
    "libavcodec/libavcodec.version",
    "libavdevice/libavdevice.version",
    "libavfilter/libavfilter.version",
    "libavformat/libavformat.version",
]

CC_COPTS = [
    "-Wno-macro-redefined",
    "-DHAVE_NASM=1",
    "-DPIC",
    "-fno-math-errno",
    "-fno-signed-zeros",
    "-include ffmpeg/config.h",
] + select({
    "@platforms//os:macos": [
        # yikes! but i want to supress these since i am on the application side.
        # and while i could just disable everything, i also like lists...
        "-Wno-absolute-value",
        "-Wno-dangling-else",
        "-Wno-deprecated-declarations",
        "-Wno-incompatible-pointer-types-discards-qualifiers",
        "-Wno-logical-op-parentheses",
        "-Wno-missing-braces",
        "-Wno-parentheses",
        "-Wno-pointer-bool-conversion",
        "-Wno-pointer-sign",
        "-Wno-shift-op-parentheses",
        "-Wno-sometimes-uninitialized",
        "-Wno-switch",
        "-Wno-tautological-compare",
        "-Wno-undefined-internal",
        "-Wno-unneeded-internal-declaration",
        "-Wno-unused-function",
        "-Wno-unused-const-variable",
    ],
    "//conditions:default": [],
})

CC_LINKOPTS = select({
    "@platforms//os:macos": [
        "-framework QuartzCore",
        "-framework QuartzCore",
        "-framework AppKit",
        "-framework OpenGL",
        "-framework QuartzCore",
        "-framework AppKit",
        "-framework OpenGL",
        "-framework CoreVideo",
        "-framework Foundation",
        "-framework AVFoundation",
        "-framework CoreMedia",
        "-framework CoreFoundation",
        "-framework VideoToolbox",
        "-framework CoreMedia",
        "-framework CoreVideo",
        "-framework CoreFoundation",
        "-framework AudioToolbox",
        "-framework CoreMedia",
        "-framework VideoDecodeAcceleration",
        "-framework CoreFoundation",
        "-framework QuartzCore",
        "-framework CoreFoundation",
        "-framework Security",
        "-framework CoreGraphics",
    ],
    "//conditions:default": [],
})

NASM_COPTS = select({
    "@platforms//os:macos": ["-DPREFIX"],
    "//conditions:default": [],
}) + ["-DPIC"]

cc_library(
    name = "avutil_linux_deps",
    linkopts = [
        "-lva",
        "-lva-drm",
        "-lva-x11",
        "-lvdpau",
        "-lX11",
    ],
    deps = ["@alsa_lib//:asound"],
)

cc_library(
    name = "avutil",
    srcs = [
        ":libavutil/avconfig.h",
        ":avutil_c",
    ],
    hdrs = glob([
        "compat/*.h",
        "compat/*/*.h",
    ]),
    copts = CC_COPTS,
    textual_hdrs = [
        ":config.h",
        "libavutil/file_open.c",
        "libavutil/log2_tab.c",
        "libavutil/reverse.c",
    ] + glob([
        "libavcodec/*.h",
        "libavcodec/x86/*.h",
        "libavutil/*.h",
        "libavutil/aarch64/*.h",
        "libavutil/mips/*.h",
        # "libavutil/mips/*_template.c",
        "libavutil/ppc/*.h",
        "libavutil/x86/*.h",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        ":config.h",
    ] + select({
        "@platforms//os:linux": [":avutil_linux_deps"],
        "//conditions:default": [],
    }),
)


CONFIG = {}

filegroup(
    name = "ffmpeg_c",
    srcs = [
               "fftools/ffmpeg.c",
               "fftools/ffmpeg.h",
               "fftools/ffmpeg_filter.c",
               "fftools/ffmpeg_hw.c",
               "fftools/ffmpeg_opt.c",
           ] + (
               ["fftools/ffmpeg_cuvid.c"] if CONFIG.get("CONFIG_CUVID", False) else []
           ) +
           (
               ["fftools/ffmpeg_qsv.c"] if CONFIG.get("CONFIG_LIBMFX", False) else []
           ) +
           (
               ["fftools/ffmpeg_videotoolbox.c"] if CONFIG.get("CONFIG_VIDEOTOOLBOX", False) else []
           ),
)

cc_library(
    name = "cmdutils",
    srcs = ["fftools/cmdutils.c"],
    hdrs = ["fftools/cmdutils.h"],
    copts = CC_COPTS,
    linkopts = CC_LINKOPTS,
    deps = [
        ":avcodec",
        ":avdevice",
        ":avfilter",
        ":avformat",
        ":avutil",
        ":config_h",
        ":postproc",
    ],
)

cc_binary(
    name = "ffmpeg",
    srcs = [":ffmpeg_c"],
    copts = CC_COPTS,
    linkopts = CC_LINKOPTS,
    deps = [
        ":avcodec",
        ":avdevice",
        ":avfilter",
        ":avformat",
        ":cmdutils",
        ":swresample",
        ":swscale",
    ],
)

cc_library(
    name = "avcodec",
    srcs = glob([
        "libavcodec/*.h",
        "libavcodec/mips/*.h",
        "libavcodec/x86/*.h",
        "libavfilter/*.h",
        "libavformat/*.h",
        "libswresample/*.h",
    ]) + [
        ":avcodec_asm_objs",
        ":avcodec_c",
    ],
    hdrs = [":avcodec_h"],
    copts = CC_COPTS + [
        "-include ffmpeg/libavutil/internal.h",
        "-include ffmpeg/libavutil/intmath.h",
    ],
    linkopts = CC_LINKOPTS + [
    ] + select({
        "@platforms//os:macos": ["-liconv"],
        "//conditions:default": [],
    }),
    textual_hdrs = glob([
        "libavcodec/*_template.c",
        "libavcodec/x86/*_template.c",
    ]) + [
        "libavcodec/aacps.c",
        "libavcodec/aacpsdata.c",
        "libavcodec/bitstream.c",
        "libavcodec/bsf_list.c",
        "libavcodec/ac3dec.c",
        "libavcodec/eac3dec.c",
        "libavcodec/golomb.c",
        "libavcodec/mathtables.c",
        "libavcodec/x86/h264_cabac.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":avutil",
        ":config_h",
        ":swresample",
        "@x264",
        "@x264//:x264_isystem",
        "@x265",
        "@x265//:x265_isystem",
        "@zlib",
    ],
)

nasm_library(
    name = "avcodec_asm_objs",
    srcs = [":avcodec_asm"],
    copts = NASM_COPTS,
    preincs = ["config.asm"],
    # deps = glob(["libavcodec/**/*_template.asm"]) + [
    #     "config.asm",
    #     ":avutil_asm_inc",
    # ],
)

cc_library(
    name = "avdevice",
    srcs = glob([
        "libavdevice/*.h",
        "libavfilter/*.h",
        "libavformat/*.h",
    ]) + [
        ":avdevice_c",
    ],
    hdrs = [":avdevice_h"],
    copts = CC_COPTS + [
        "-include ffmpeg/libavutil/internal.h",
    ],
    linkopts = CC_LINKOPTS + select({
        "@platforms//os:linux": [
            "-lxcb",
            "-lxcb-shape",
            "-lxcb-shm",
            "-lxcb-xfixes",
        ],
        "@platforms//os:macos": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        #":avdevice_objc",
        ":config_h",
        ":avcodec",
        ":avfilter",
        ":avformat",
        ":avutil",
        ":swresample",
        ":swscale",
    ],
)

# objc_library(
#     name = "avdevice_objc",
#     srcs = glob([
#         "libavdevice/*.m",
#         "libavdevice/*.h",
#         "libavutil/*.h",
#     ]),
# )

cc_library(
    name = "avfilter",
    srcs = [
        ":avfilter_asm_objs",
        ":avfilter_c",
    ] + glob([
        "libavfilter/*.h",
        "libswscale/*.h",
    ]),
    hdrs = [":avfilter_h"],
    copts = CC_COPTS + [
        "-include ffmpeg/libavutil/internal.h",
        "-include ffmpeg/libavutil/intmath.h",
    ],
    linkopts = CC_LINKOPTS,
    textual_hdrs = glob([
        # "libavfilter/*.inc",
        "libavfilter/*_template.c",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        ":avformat",
        ":avutil",
        ":config_h",
        ":swresample",
        ":swscale",
    ],
)

# objc_library(
#     name = "avfilter_objc",
#     srcs = glob(["libavfilter/*.m"]),
# )

nasm_library(
    name = "avfilter_asm_objs",
    srcs = [":avfilter_asm"],
    copts = NASM_COPTS,
    preincs = ["config.asm"],
    # deps = [
    #     "config.asm",
    #     ":avutil_asm_inc",
    # ],
)

cc_library(
    name = "avformat",
    srcs = [":avformat_c"],
    hdrs = [":avformat_h"],
    copts = CC_COPTS + [
        "-include ffmpeg/libavutil/internal.h",
        "-include ffmpeg/libavutil/intmath.h",
    ],
    linkopts = CC_LINKOPTS,
    textual_hdrs = [
        "libavformat/protocol_list.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":avcodec",
        ":avutil",
        ":config_h",
        ":swresample",
        "@bzip2",
        "@openssl//:crypto",
        "@openssl//:ssl",
    ],
)

cc_library(
    name = "postproc",
    srcs = [":postproc_c"] + glob([
        "libpostproc/*.h",
    ]),
    hdrs = [":postproc_h"],
    copts = CC_COPTS + [
        "-include ffmpeg/libavutil/cpu.h",
    ],
    linkopts = CC_LINKOPTS,
    textual_hdrs = glob([
        "libpostproc/*_template.c",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        ":avutil",
        ":config_h",
    ],
)

cc_library(
    name = "swresample",
    srcs = [
        ":swresample_asm_objs",
        ":swresample_c",
    ] + glob([
        "libswresample/*.h",
    ]),
    hdrs = [":swresample_h"],
    copts = CC_COPTS + [
        "-include ffmpeg/libavutil/internal.h",
    ],
    linkopts = CC_LINKOPTS,
    textual_hdrs = glob([
        "libswresample/*_data.c",
        "libswresample/*_template.c",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        ":avutil",
        ":config_h",
    ],
)

nasm_library(
    name = "swresample_asm_objs",
    srcs = [":swresample_asm"],
    copts = NASM_COPTS,
    preincs = ["config.asm"],
    # deps = [
    #     "config.asm",
    #     ":avutil_asm_inc",
    # ],
)

cc_library(
    name = "swscale",
    srcs = [
        ":swscale_asm_objs",
        ":swscale_c",
    ] + glob([
        "libswscale/*.h",
    ]),
    hdrs = [":swscale_h"],
    copts = CC_COPTS + [
        "-include ffmpeg/libavutil/internal.h",
    ],
    linkopts = CC_LINKOPTS,
    textual_hdrs = glob([
        "libswscale/**/*_template.c",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        ":avutil",
        ":config_h",
    ],
)

nasm_library(
    name = "swscale_asm_objs",
    srcs = [":swscale_asm"],
    copts = NASM_COPTS,
    preincs = ["config.asm"],
    # deps = [
    #     "config.asm",
    #     ":avutil_asm_inc",
    # ],
)
